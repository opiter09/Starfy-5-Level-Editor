I made a little python file to split apart an objects file into its component objects (namely
objSplit.py). All addresses below are in terms of a single 40-byte section.

0x00-0x01 is the thing's X value, and 0x02-0x03 is the thing's Y value, in terms of pixels, I think.
Furthermore, I have conclusively shown that the orign, (0, 0), is in the top left, and then values
get bigger going right and down.

Furthermore, I did some comparisons with the room size values they give at the beginning of the statics
chunks. I believe that each unit of X or Y there refers to a 16 pixel x 16 pixel block. I have, however,
seen a coordinate not divisible by 16 (with an 8 on the end), so that is probably why they don't just do
block numbers.

0x04-0x05 definitely is the ID of the object. Obviously with so many working out a full table
will be hard, but here is what I have so far:
- 0x01: Player Starting Position [chunk after pos/ID is all 00's except for a 01 at 0x08 and a 14 at 0x14]
- 0x02: Normal Door
- 0x03: Skull Door
- 0x04: Small Pearl [chunk after pos/ID is all 00's]
- 0x05: Big Pearl [chunk after pos/ID is all 00's]
- 0x0B: Saving Clam [chunk after pos/ID is all 00's]
- 0x0C: Invisible Saving Object (you always need this to go with a 0x0B; I'm not sure if its position
  matters but I would put it close to the clam to be safe) [chunk after pos/ID is all 00's]
- 0x1B: Victory Platform [chunk after pos/ID is all 00's]
- 0x3C: Skull Door with Purple Flames

starting with ID 0x3D, the objects it represents actually vary from world to world. Fortunately, however,
it mostly just follows the list in the Toy Collection, so this was easy enough to write up:

0x0E is the room to which a door goes. Note that this is only the room number, since the
world and level are implied (this is why the switch worlds cheat code works).