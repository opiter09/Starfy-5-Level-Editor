If you can't tell, the file of interest is stage/mapoo.bin. Most of its chunks are LZSS-decompressed.

Further, it has been determined that 557 of the chunks in that long 571 to 2076 strech of bin files have a
non-zero in their fifth byte. This matches up with the fact that there are about 555 rooms, according to my
split of roominfo.bin.

"That's not right," you say, "roomSplit.py gives you 896 files!" Ah, but Starfy 5 is very, very weird. 
World 9 and 10 are just 09- and 10-, but Worlds 1-8 use the four normal levels from 11- through 18-, and the
three secret levels from 01- through 08-. This, combined with 00-, gives us 555 rooms. I then ran some code
and found out that there are exactly two rooms from 01- to 08- that never made it over: 01-01-04 and
08-04-19. With these we get our 557, and there we go!

To be clear, the useful files in question are 0570.bin through 1146.bin. Helpfully, the file batchBatchTwo.py
will both decompress these files, and append world-level-room designations to their names.

Looking at any of the good files, the first 16 bytes are a header. If you multiply the first four (as a
little-endian integer) by the second four, then multiply that by 2 (since everything below seems to be
two-byte integers), and then by the third four, and then add 16, you always get the file size. That implies
that each 1 / (bytes 8-12) of the post-header file is a grid for the room, with each presumably being
different properties (collision, entities, etc.), or possibly different layers. This is quickly borne out if
you have a look at the boundaries between the sections.

So far, it seems that just replacing one of these files with another from a different world will freeze the
game, while if you transplant from the same world you get a glitchy mess. Even if you copy over the value
in mapoo.bin between the two pointers of the subfile, it just makes a *different* glitchy mess.

The most luck I've had is by doing the above to rooms within the same level, which transplants everything
except the non-static objects. I'm still on the hunt for those, and I also will have to decipher roominfo.bin
files most likely in order to allow for changing the 3d background, the tileset, etc.

I also figured out that among the most likely candidates for the object thing, the bin files after 1146.bin,
every single file is in chunks of 40 bytes. You can tell because each file's size is equal to either exactly
16 + (40 * the first byte), or that with an extra 8 bytes of padding added at the end.

By the power of memory dumping, I have found that 1795.bin is related to 02-03-08. Now that seems kind of
late in the order here, unless of course it goes by world-duplication order and not unique level order.

Okay, got it! If you look at the beginning of the roominfo files, 0x0c-0x0D corresponds to the statics
chunk, and 0x10-0x11 corresponds to the objects chunk.